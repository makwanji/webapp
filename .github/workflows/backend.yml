name: DevSecOps CI (ProductService - API)

on:
  push:
    branches:
      - main  # You can change this to the branch where you want the action to trigger
      - draft
    paths:
      - 'backend/**'  # Triggers only if there are changes in the 'productservice-webse' subfolder
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        continue-on-error: true
        run: cd backend && npm ci && cd .. # npm ci

      - name: Build application
        run: exit 0 # npm run build

      # Run ESLint or other static analysis tool
      - name: Run ESLint [syntax errors, code quality issues, and enforcing coding standards]
        continue-on-error: true
        run: cd backend && npm install && npx eslint . && cd ..

  sastbk:
    name: SAST - Static Code Analysis

    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        id: bg_stat
        continue-on-error: true
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=backend
            -Dsonar.sources=backend

  dep-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        continue-on-error: true
        run: cd backend && npm ci && cd ..

      # Check for vulnerabilities in node_modules using npm audit
      - name: Check for vulnerable packages using npm audit
        continue-on-error: true
        run: cd backend && npm audit --audit-level=high && cd ..

      # - name: OWASP Dependency Check
      #   run: exit 0

      # OWASP Dependency-Check scan for vulnerabilities
      - name: OWASP Dependency Check
        continue-on-error: true
        id: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ProductServiceAPI'
          format: 'HTML'
          out: './dependency-check-report'
          path: './backend'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload dependency check report
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report/dependency-check-report.html

  test:
    name: Run Unit and Integration Tests
    runs-on: ubuntu-latest
    needs:
      - sastbk
      - dep-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # - name: Install dependencies
      #   run: npm ci

      # - name: Run tests
      #   run: npm test

      - name: Run tests
        run: exit 0

  docker:
    name: Build, Scan and Publish Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        continue-on-error: true
        run: cd backend && npm ci && cd ..

      - name: Build application
        run: exit 0 #cd backend && npm run build && cd ..

      # Dockerize the app using multi-stage build
      - name: Set up Docker Buildx
        continue-on-error: true
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t makwanji/productservice-app:v1.0.${{ github.run_number }} ./backend
          docker push makwanji/productservice-app:v1.0.${{ github.run_number }}

      - name: Install Cosign
        run: |
          COSIGN_VERSION=$(curl -s https://api.github.com/repos/sigstore/cosign/releases/latest | jq -r '.tag_name')
          curl -L "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64" -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

        # Ref - https://raesene.github.io/blog/2021/03/21/Trying-out-cosign/
      - name: place the cosign private key in a file
        run: 'echo "$COSIGN_KEY" > /tmp/cosign.key'
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}

      - name: Sign image using Cosign
        continue-on-error: true
        run: |
          echo -n "${{secrets.COSIGN_KEY_PASSPHRASE}}" | /usr/local/bin/cosign sign -key /tmp/cosign.key docker.io/makwanji/productservice-app:v1.0.${{ github.run_number }}


      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        continue-on-error: true
        with:
          image-ref: 'docker.io/makwanji/productservice-app:v1.0.${{ github.run_number }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          # scan-type: image

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Deploy to Kubernetes cluster
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Kubernetes
        run: |
          exit 0 # kubectl apply -f k8s/deployment.yaml

